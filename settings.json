{
  // 默认是 One Dark 和 One Light theme。
  "theme": {
    "dark": "Gruvbox Dark Hard",
    "light": "Gruvbox Light Hard",
    "mode": "system"
  },
  // 不使用缺省的 keymap，只使用自定义 keymap。
  "base_keymap": "None",
  // open 和 save as 使用 zed 内置的文件选择，更高效。
  "use_system_path_prompts": false,
  "assistant": {
    "show_hints": false,
    "default_model": {
      "provider": "zed.dev",
      "model": "claude-3-5-sonnet-latest"
    },
    "inline_alternatives": [
      {
        "provider": "zed.dev",
        "model": "claude-3-5-sonnet-latest"
      }
    ],
    "button": true,
    "enabled": true,
    "version": "2"
  },
  "journal": {
    "hour_format": "hour24",
    "path": "~/docs"
  },
  // 根据 preferred_line_length 或当前 editor 的宽度来自动“软”换行。
  // 软换行：视觉上换行，但是实际文本并没有插入换行字符。
  "soft_wrap": "bounded",
  "preferred_line_length": 120,
  // 在列表中的各宽度位置显示 guide line。
  "wrap_guides": [90, 120],
  "indent_guides": {
    "coloring": "fixed"
  },
  "show_inline_completions": true,
  "inline_completions_disabled_in": ["string", "comment"],
  "inline_completions": {
    "disabled_globs": ["**.org", "**.md"]
  },
  "features": {
    "inline_completion_provider": "none" // "copilot"
  },
  "confirm_quit": true,
  "cursor_shape": "bar",
  // Sarasa Mono SC 是基于 Isoveka 的中英文编程字体，字体偏小。
  //"buffer_font_family": "Sarasa Mono SC",
  "buffer_font_size": 16,
  "ui_font_size": 18,
  // comfortable 是 1.618 倍行距，便于阅读。
  "buffer_line_height": "comfortable",
  "buffer_font_features": {
    // calt 指 ligatures
    "calt": false
  },
  // 在 multibuffer 中双击: 打开文件。
  "double_click_in_multibuffer": "open",
  "gutter": {
    // 是否显示 line number。
    "line_numbers": true,
    // 关闭一些不常用的功能，节省左侧空间。
    "code_actions": false,
    "runnables": false,
    "folds": true
  },
  "hard_tabs": false,
  "formatter": "auto",
  "remove_trailing_whitespace_on_save": true,
  "ensure_final_newline_on_save": true,
  // 开启后，搜索字符包含大写时区分大小写（未开启时不区分大小写）。
  "use_smartcase_search": true,
  "centered_layout": {
    "left_padding": 0.1,
    "right_padding": 0.2
  },
  "current_line_highlight": "all",
  "auto_signature_help": true,
  "hover_popover_enabled": true,
  "scroll_sensitivity": 0.3,
  // 空闲超过指定时间后自动保存。
  "autosave": { "after_delay": { "milliseconds": 5000 } },
  "inlay_hints": {
    // 关闭，提升性能
    "enabled": false
  },
  // 激活 pane 后，调整 pane 的大小、边框和透明度，从而容易区分。
  "active_pane_modifiers": {
    "magnification": 1,
    "border_size": 2,
    "inactive_opacity": 0.8
  },
  "project_panel": {
    "auto_fold_dirs": false,
    "indent_size": 16,
    "dock": "left"
  },
  "outline_panel": {
    "indent_size": 16,
    "dock": "left"
  },
  "chat_panel": {
    "button": false
  },
  "notification_panel": {
    "button": false
  },
  "collaboration_panel": {
    "button": false
  },
  "vim_mode": false,
  //   "default_dock_anchor": "expanded",
  "tabs": {
    "git_status": false,
    // 不显示 icon，节省 tab 空间。
    "file_icons": false,
    "close_position": "left"
  },
  "tab_bar": {
    "show": true,
    "show_nav_history_buttons": false
  },
  "toolbar": {
    // 是否显示搜索、AI、Inlay 等快速操作按钮。
    "quick_actions": false,
    "breadcrumbs": true
  },
  "scrollbar": {
    "show": "auto",
    // 高亮显示 git diff
    "git_diff": true
  },
  // preview tabs: 在一个公共 tab 中自动切换显示多个文件，避免打开过多 tab。
  "preview_tabs": {
    // 对 file finder 打开的文件启用
    "enable_preview_from_file_finder": true,
    // 对 code navi 打开的文件启用
    "enable_preview_from_code_navigation": true
  },
  "file_finder": {
    "modal_width": "medium"
  },
  "terminal": {
    // 使用更紧凑的 Sarasa Term SC 字体。
    "font_family": "Sarasa Term SC",
    "font_size": 16,
    // zed 给 task 追加的环境变量，不支持 shell 变量替换。
    // 这里的环境变量优先级较低，~/.bashrc 和 project envs 都会覆盖这里的同名
    // 变量。
    "env": {
      // lazygit 读取配置的目录。
      "XDG_CONFIG_HOME": "/Users/alizj/.config",
      // difftastic 在浅色背景下显示的更清晰。
      "DFT_BACKGROUND": "light",
      "ALL_PROXY": "socks5h://127.0.0.1:1080",
      "all_proxy": "socks5h://127.0.0.1:1080"
    },
    "option_as_meta": true,
    "copy_on_select": true,
    "shell": {
      "with_arguments": {
        "program": "bash",
        "args": ["-l", "-i"]
      }
    },
    // 先使用 workspace 中第一个 project，如果失败则使用 HOME。 用于修复 zed
    // terminal 可能将 file 识别为 cwd 问题，例如编辑的文件不属于当前打开的任意 project。
    "working_directory": "current_project_directory",
    // standard 适用于 TUI 程序。
    "line_height": "standard"
  },
  "proxy": "socks5h://127.0.0.1:1080",
  "git": {
    // 在最左侧显示 git gutter。
    "git_gutter": "tracked_files",
    "inline_blame": {
      "enabled": true,
      "delay_ms": 5000,
      "show_commit_summary": true
    }
  },
  "ssh_connections": [
    {
      "host": "dev2",
      "username": "alizj"
    }
  ],
  "file_scan_exclusions": [
    "**/.git",
    "**/.svn",
    "**/.hg",
    "**/CVS",
    "**/.DS_Store",
    "**/Thumbs.db",
    "**/.classpath",
    "**/.settings",
    "**/.cargo", // rust
    "**/.rustup",
    "**/target/debug",
    "**/target/release",
    "**/target/release-fast",
    "**/target/aarch64-apple-darwin",
    "**/target/remote_server",
    "**/vendor", // go
    "**/pkg/mod"
  ],
  // 包含被 git 忽略的文件目录，但是可以被 file_scan_exclusions 重载。
  "file_scan_inclusions": [".env*", "docker-compose.*.yml"],
  "file_types": {
    "JSONC": [
      // 所有 JSON 文件均使用 jsonc
      "**/*.json"
    ]
  },
  "load_direnv": "shell_hook",
  // by 语言设置配置参数, 可配置的参数列表: https://zed.dev/docs/configuring-zed#languages
  // 需要先安装 prettier 工具：brew install prettier
  "languages": {
    "Python": {
      "language_servers": ["pyright", "!pylsp"]
    },
    "Org": {
      "tab_size": 2
      // "formatter": "prettier", // 不支持 org
      //"preferred_line_length": 110,
      //"soft_wrap": "preferred_line_length"
    },
    "Markdown": {
      "tab_size": 2,
      "formatter": "prettier"
      //"preferred_line_length": 110,
      //"soft_wrap": "preferred_line_length"
    },
    "TOML": {
      "formatter": "prettier",
      "format_on_save": "off"
    },
    "YAML": {
      "tab_size": 2,
      "formatter": "prettier"
    },
    "JSON": {
      "tab_size": 2,
      "preferred_line_length": 130,
      "formatter": "prettier"
    },
    "JSONC": {
      "tab_size": 2,
      "preferred_line_length": 100,
      "formatter": "prettier"
    }
    // "C": {
    //   "format_on_save": "on",
    //   "tab_size": 4,
    //   "formatter": {
    //     "external": {
    //       "command": "clang-format",
    //       "arguments": ["-style={IndentWidth: 4, ColumnLimit: 0}"]
    //     }
    // },
    // "Shell Script": { // 注意：语言名称不是 Bash 或 Shell
    //   "format_on_save": "on",
    //   "formatter": {
    //     "external": {
    //       "command": "shfmt",
    //       "arguments": [
    //         "-bn",
    //         "-ci",
    //         "-sr",
    //         "-i",
    //         "2"
    //       ]
    //     }
    //   }
    // }
  },
  "lsp": {
    // key 为 language server 名称。
    // "cargo-tom": {
    //   "binary": {
    //     "path": "/Users/alizj/go/bin/cargotom-aarch64-apple-darwin",
    //     "arguments": ["--storage", "."]
    //   },
    //   "initialization_options": {
    //     "offline": false,
    //     "stable": false,
    //     "per_page_web": 50
    //   }
    // },
    // "cargo-appraiser": {
    //   "binary": {
    //     "path": "/Users/alizj/go/bin/cargo-appraiser",
    //     "arguments": ["--renderer", "inlayHint"]
    //   }
    // },
    "pyright": {
      "binary": {
        // 使用微软官方提供的安装方式：sudo npm install -g pyright
        // pip 为社区维护的安装方式。
        "path": "/opt/homebrew/bin/pyright-langserver",
        "arguments": ["--stdio"]
      }
    },
    "gopls": {
      // 需要配置 -debug 地址为 127.0.0.1，防止被 proxy 代理导致出错。
      "binary": {
        "path": "/Users/alizj/go/bin/gopls",
        "arguments": ["-debug=127.0.0.1:9090"]
      },
      "initialization_options": {
        "usePlaceholders": true,
        "env": {
          "GOOS": "linux",
          "GOARCH": "arm64"
        },
        "buildFlags": ["-tags=debug"],
        "completeUnimported": true,
        "experimentalPostfixCompletions": true,
        "hints": {
          "assignVariableTypes": false,
          "compositeLiteralFields": false,
          "compositeLiteralTypes": false,
          "constantValues": true,
          "functionTypeParameters": true,
          "parameterNames": true,
          "rangeVariableTypes": true
        }
      }
    },
    "rust-analyzer": {
      "binary": {
        "path": "/Users/alizj/.cargo/bin/rust-analyzer",
        "arguments": []
      },
      "initialization_options": {
        // cargo fmt 的很多特性依赖于 +nightly toolchain。
        "rustfmt": {
          "extraArgs": ["+nightly"]
        },
        // // 从 rust-analyzer 获得更多的诊断信息（因为后续关闭了 cargo check 检查）。
        // "diagnostics": {
        //   "experimental": {
        //     "enable": true
        //   }
        // },
        "files": {
          "excludeDirs": ["/Users/alizj/.cargo", "/Users/alizj/.rustup"]
        },
        "completion": {
          "fullFunctionSignatures": {
            "enable": true
          }
        },
        // 关闭 checkOnSave 后，rust-analyzer 不运行 cargo check 命令，而只运行 rust-analyzer 自身的检查（非常受限）, 这会 导致 大
        // 部分错误都检查不出来。下面的 check、cargo 配置都将失效。
        //
        // 如果想运行 cargo check 检查，只能手动运行自动生成的 task： argo check --workspace --all-targets 然后在 task
        // terminal 中查看结果（不会在线显示）。
        "checkOnSave": true,
        // 默认 cargo check --workspace --all-targets 影响性能，关闭 --workspace 和 --all-targets。
        "check": {
          "command": "clippy", // cargo check 使用 clippy
          "workspace": false
        },
        "cargo": {
          "allTargets": false
        }
        //"linkedProjects": ["./path/to/a/Cargo.toml", "./path/to/b/Cargo.toml"]
      }
    }
    // "clangd": {
    //   "binary": {
    //     "path": "/path/to/compiler",
    //     "arguments": [
    //       "--background-index",
    //       "--compile-commands-dir=build",
    //       "--clang-tidy",
    //       "--clang-tidy-checks=*",
    //       "--header-insertion=never",
    //       "--header-insertion-decorators=none"
    //     ]
    //   }
    // }
  }
}
